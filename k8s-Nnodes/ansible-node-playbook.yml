---
- hosts: all
  become: true
  tasks:
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common


  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
      state: present

  - name: Install docker and its dependecies
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce 
      - docker-ce-cli 
      - containerd.io
    notify:
      - docker status

  - name: setup daemon.json, create docker.service.d and restart docker
    command: "{{ item }}"
    with_items:
     - cp /vagrant/daemon.json /etc/docker/daemon.json 
     - mkdir -p /etc/systemd/system/docker.service.d
     - systemctl daemon-reload
     - systemctl restart docker
     - systemctl enable docker

  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker


  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker

  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - kubelet 
      - kubeadm 
      - kubectl


#  - name: Configure node ip
#    lineinfile:
#      path: /etc/default/kubelet
#      line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}

  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted

  - name: Create /home/vagrant/.kube directory if it does not exist
    file:
      path: /home/vagrant/.kube
      state: directory
      mode: '0755'


  - name: Create /home/vagrant/.kube/config file if it doesn't exist example
    file:
      path: "/home/vagrant/.kube/config"
      state: touch
      mode: u+rw,g-rwx,o-rwx
      owner: vagrant
      group: docker

  - name: Copy the config file to /home/vagrant/.kube/config location
    copy: src="/vagrant/config" dest="/home/vagrant/.kube/config" remote_src=yes mode=0600


  - name: Create /vagrant/join_command.sh file if it doesn't exist example
    become: yes
    become_user: vagrant
    file:
      path: "/vagrant/join_command.sh"
      state: touch

  - name: Copy the join command to a shell script
    copy: src="/vagrant/join_command" dest="/vagrant/join_command.sh" remote_src=yes mode=0755

  - name: Sleep 30 seconds
    command: sleep 30

  - name: JOIN node1 to k8s-master ..............
    become: yes
    become_user: vagrant
    become_method: enable
    command: sudo sh /vagrant/join_command.sh

  - name: Remove  join_command file from /vagrant directory
    file:
      path: /vagrant/join_command
      state: absent

  - name: Remove  join_command.sh file from /vagrant directory
    file:
      path: /vagrant/join_command.sh
      state: absent

  - name: Remove  config file from /vagrant directory
    file:
      path: /vagrant/config
      state: absent

  handlers:
    - name: docker status
      service: name=docker state=started
