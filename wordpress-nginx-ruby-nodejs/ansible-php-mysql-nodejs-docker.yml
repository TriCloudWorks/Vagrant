- hosts: all
  become: true
  vars:
#Vagrant Settings
    var_node: /home/vagrant
    unzip_version: "6.0*"

#PHP Settings
    php_modules: [ 'php', 'php-curl', 'php-gd', 'php-mbstring', 'php-xml', 'php-xmlrpc', 'php-soap', 'php-intl', 'php-zip' ]
     
#MySQL Settings
    mysql_root_password: "rootpassword"
    mysql_db: "wpdb"
    mysql_user: "wpuser"
    mysql_password: "password"
     
#HTTP Settings
##    http_host: "wp.bpva.com"
##    http_conf: "wp.bpva.com.conf"
    http_host: "localhost"
    http_conf: "localhost.conf"
    http_port: "8080"

  tasks:
### --- NODEJS
  - name: Node.js - Get script
    get_url:
      url: "http://deb.nodesource.com/setup_14.x"
      dest: "{{ var_node }}/nodejs.sh"
  
  - name: Node.js - Set execution permission to script
    file:
      path: "{{ var_node }}/nodejs.sh"
      mode: "u+x"
  
  - name: Node.js - Execute installation script
    shell: "{{ var_node }}/nodejs.sh"
  
  - name: Node.js - Remove installation script
    file:
      path: "{{ var_node}}/nodejs.sh"
      state: absent
  
  - name: Install build-essential
    apt: name=build-essential state=present 

  - name: Node.js - Install Node.js
    apt: name=nodejs state=present update_cache=yes


### --- RUBY
  - name: Install Ruby dependencies
    apt:
      name: ['gcc', 'autoconf', 
'bison', 'build-essential', 'libssl-dev', 'libyaml-dev', 'libreadline6-dev', 
'zlib1g-dev', 'libncurses5-dev', 'libffi-dev', 'libgdbm3', 'libgdbm-dev', 
'sqlite3', 'libsqlite3-dev', 'nodejs']
##      name: "{{ item }}"
##    with_items:
##      - gcc
##      - autoconf
##      - bison
##      - build-essential
##      - libssl-dev
##      - libyaml-dev
##      - libreadline6-dev
##      - zlib1g-dev
##      - libncurses5-dev
##      - libffi-dev
##      - libgdbm3
##      - libgdbm-dev
##      - sqlite3
##      - libsqlite3-dev
##      - nodejs

  - name: Download ruby-install
    become: no
    get_url:
      url: https://github.com/postmodern/ruby-install/archive/v0.6.1.tar.gz
      dest: "{{ var_node }}/ruby-install-0.6.1.tar.gz"
  - name: Extract ruby-install tarball
    become: no
    unarchive:
      src: "{{ var_node }}/ruby-install-0.6.1.tar.gz"
      dest: "{{ var_node }}"
      creates: "{{ var_node }}/ruby-install-0.6.1"
      remote_src: yes
  - name: Install ruby-install
    make:
      chdir: "{{ var_node }}/ruby-install-0.6.1"
      target: install

  - name: Install Ruby
    become_user: vagrant
    command: /usr/local/bin/ruby-install --no-install-deps ruby 2.5.0
    args:
      creates: "{{ var_node }}/.rubies/ruby-2.5.0"

  - name: Download chruby
    become: no
    get_url:
      url: https://github.com/postmodern/chruby/archive/v0.3.9.tar.gz
      dest: "{{ var_node }}/chruby-0.3.9.tar.gz"
  - name: Extract chruby tarball
    become: no
    unarchive:
      src: "{{ var_node }}/chruby-0.3.9.tar.gz"
      dest: "{{ var_node }}"
      creates: "{{ var_node }}/chruby-0.3.9"
      remote_src: yes
  - name: Install chruby
    make:
      chdir: "{{ var_node }}/chruby-0.3.9"
      target: install

  - name: Load chruby for vagrant user
    lineinfile:
      path: "{{ var_node }}/.bashrc"
      regexp: 'chruby.sh$'
      line: 'source /usr/local/share/chruby/chruby.sh'
      insertbefore: BOF
  - name: Set ruby version for vagrant user
    lineinfile:
      path: "{{ var_node }}/.profile"
      regexp: '^chruby'
      line: 'chruby ruby-2.5.0'


  - name: Install bundler
    become_user: vagrant
    command: 'chruby-exec ruby-2.5.0 -- gem install bundler'
    args:
      creates: "{{ var_node }}/.gem/ruby/2.5.0/bin/bundle"


### Install NGINX
  - name: Install nginx
    apt:
      name: nginx
      state: latest



  - name: Install prerequisites
    apt: name=aptitude update_cache=yes state=latest force_apt_get=yes
    tags: [ system ]

  - name: Install LAMP Packages
    apt: name={{ item }} update_cache=yes state=latest
    loop: [ 'apache2', 'mysql-server', 'python3-pymysql', 'php', 'php-mysql', 'libapache2-mod-php' ]
    tags: [ system ]

  - name: Install PHP Extensions
    apt: name={{ item }} update_cache=yes state=latest
    loop: "{{ php_modules }}"
    tags: [ system ]

# Apache Configuration
  - name: Create document root
    file:
      path: "/var/www/{{ http_host }}"
      state: directory
      owner: "www-data"
      group: "www-data"
      mode: '0755'
    tags: [ apache ]

  - name: Set up Apache VirtualHost
    template:
      src: "jinja2/apache.conf.j2"
      dest: "/etc/apache2/sites-available/{{ http_conf }}"
    notify: Reload Apache
    tags: [ apache ]

  - name: Enable rewrite module
    shell: /usr/sbin/a2enmod rewrite
    notify: Reload Apache
    tags: [ apache ]

  - name: Enable new site
    shell: /usr/sbin/a2ensite {{ http_conf }}
    notify: Reload Apache
    tags: [ apache ]

  - name: Disable default Apache site
    shell: /usr/sbin/a2dissite 000-default.conf
    notify: Restart Apache
    tags: [ apache ]

# MySQL Configuration
  - name: Set the root password
    mysql_user:
      name: root
      password: "{{ mysql_root_password }}"
      login_unix_socket: /var/run/mysqld/mysqld.sock
    tags: [ mysql, mysql-root ]

  - name: Remove all anonymous user accounts
    mysql_user:
      name: ''
      host_all: yes
      state: absent
      login_user: root
      login_password: "{{ mysql_root_password }}"
    tags: [ mysql ]

  - name: Remove the MySQL test database
    mysql_db:
      name: test
      state: absent
      login_user: root
      login_password: "{{ mysql_root_password }}"
    tags: [ mysql ]

  - name: Creates database for WordPress
    mysql_db:
      name: "{{ mysql_db }}"
      state: present
      login_user: root
      login_password: "{{ mysql_root_password }}"
    tags: [ mysql ]

  - name: Create MySQL user for WordPress
    mysql_user:
      name: "{{ mysql_user }}"
      password: "{{ mysql_password }}"
      priv: "{{ mysql_db }}.*:ALL"
      state: present
      login_user: root
      login_password: "{{ mysql_root_password }}"
    tags: [ mysql ]

# UFW Configuration
  - name: "UFW - Allow HTTP on port {{ http_port }}"
    ufw:
      rule: allow
      port: "{{ http_port }}"
      proto: tcp
    tags: [ system ]

# WordPress Configuration
  - name: Download and unpack latest WordPress
    unarchive:
      src: https://wordpress.org/latest.tar.gz
      dest: "/var/www/{{ http_host }}"
      remote_src: yes
      creates: "/var/www/{{ http_host }}/wordpress"
    tags: [ wordpress ]

  - name: Set ownership
    file:
      path: "/var/www/{{ http_host }}"
      state: directory
      recurse: yes
      owner: www-data
      group: www-data
    tags: [ wordpress ]

  - name: Set permissions for directories
    shell: "/usr/bin/find /var/www/{{ http_host }}/wordpress/ -type d -exec chmod 750 {} \\;"
    tags: [ wordpress ]

  - name: Set permissions for files
    shell: "/usr/bin/find /var/www/{{ http_host }}/wordpress/ -type f -exec chmod 640 {} \\;"
    tags: [ wordpress ]

  - name: Set up wp-config
    template:
      src: "jinja2/wp-config.php.j2"
      dest: "/var/www/{{ http_host }}/wordpress/wp-config.php"
    tags: [ wordpress ]

  handlers:
    - name: Reload Apache
      service:
        name: apache2
        state: reloaded
  
    - name: Restart Apache
      service:
        name: apache2
        state: restarted
  
  
